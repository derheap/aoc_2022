# Day X

```elixir
Mix.install([
  {:kino, "~> 0.7.0"}
])

import ExUnit.Assertions
```

## Import data

```elixir
input_field = Kino.Input.textarea("Please paste your input file:")
# input = File.read!("input/02.txt")
```

## Part 1

```elixir
test_input = """
vJrwpWtwJgWrhcsFMMfFFhFp
jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL
PmmdzqPrVvPwwTWBwg
wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn
ttgJtRGJQctTZtZT
CrZsJsPPZsGzwwsLwLmpwMDw
"""
```

* The first rucksack contains the items vJrwpWtwJgWrhcsFMMfFFhFp, which means its first compartment contains the items vJrwpWtwJgWr, while the second compartment contains the items hcsFMMfFFhFp. The only item type that appears in both compartments is lowercase p.
* The second rucksack's compartments contain jqHRNqRjqzjGDLGL and rsFMfFZSrLrFZsSL. The only item type that appears in both compartments is uppercase L.
* The third rucksack's compartments contain PmmdzqPrV and vPwwTWBwg; the only common item type is uppercase P.
* The fourth rucksack's compartments only share item type v.
* The fifth rucksack's compartments only share item type t.
* The sixth rucksack's compartments only share item type s.

To help prioritize item rearrangement, every item type can be converted to a priority:

```
Lowercase item types a through z have priorities 1 through 26.
Uppercase item types A through Z have priorities 27 through 52.
```

In the above example, the priority of the item type that appears in both compartments of each rucksack is 16 (p), 38 (L), 42 (P), 22 (v), 20 (t), and 19 (s); the sum of these is 157.Puzzle discription

```elixir
defmodule One do
  def find_same({part_1, part_2}) do
    char =
      part_1
      |> String.to_charlist()
      |> Enum.map(fn c -> to_string([c]) end)
      |> Enum.reduce_while(
        nil,
        fn c, _ ->
          if String.contains?(part_2, c), do: {:halt, c}, else: {:cont, c}
        end
      )

    char
  end

  def priority(c) do
    code = hd(to_charlist(c))

    if code < 97 do
      code - 64 + 26
    else
      code - 96
    end
  end

  def run(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(fn s -> String.split_at(s, Integer.floor_div(String.length(s), 2)) end)
    |> Enum.map(fn pair -> find_same(pair) end)
    |> Enum.map(&priority/1)
    |> Enum.sum()
  end

  def reveal(input) do
    IO.puts("--- Part one ---")
    IO.inspect(input)
  end
end

One.run(test_input)
assert(One.run(test_input) == 157, "Part 1 with test input failed")

input = Kino.Input.read(input_field)
result = One.run(input)
assert(result == 7553, "Part 1 failed")
One.reveal(result)
```

Other verson for part 1. better suited for part 2.

```elixir
s = "vJrwpWtwJgWrhcsFMMfFFhFp"

s
|> String.split("\n", trim: true)
|> Enum.map(fn s -> String.split_at(s, Integer.floor_div(String.length(s), 2)) end)
|> Enum.map(fn {p1, p2} -> {to_charlist(p1), to_charlist(p2)} end)
|> Enum.map(fn {p1, p2} -> Enum.uniq(p1) ++ Enum.uniq(p2) end)
|> Enum.map(fn cl -> Enum.sort(cl) end)
|> Enum.map(fn cl ->
  Enum.reduce_while(cl, '', fn c, acc -> if c == acc, do: {:halt, c}, else: {:cont, c} end)
end)
```

## Part 2

Additionally, nobody wrote down which item type corresponds to each group's badges. The only way to tell which item type is the right one is by finding the one item type that is common between all three Elves in each group.

Every set of three lines in your list corresponds to a single group, but each group can have a different badge item type. So, in the above example, the first group's rucksacks are the first three lines:

```
vJrwpWtwJgWrhcsFMMfFFhFp
jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL
PmmdzqPrVvPwwTWBwg
```

And the second group's rucksacks are the next three lines:

```
wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn
ttgJtRGJQctTZtZT
CrZsJsPPZsGzwwsLwLmpwMDw
```

In the first group, the only item type that appears in all three rucksacks is lowercase r; this must be their badges. In the second group, their badge item type must be Z.

Priorities for these items must still be found to organize the sticker attachment efforts: here, they are 18 (r) for the first group and 52 (Z) for the second group. The sum of these is 70.

Find the item type that corresponds to the badges of each three-Elf group. What is the sum of the priorities of those item types?

```elixir
defmodule Two do
  def group(list) do
    group(list, [])
  end

  def group([], acc) do
    acc
  end

  def group(list, acc) do
    {part, rest} = Enum.split(list, 3)
    group(rest, [part | acc])
  end

  def prepare(items) do
    items
    |> to_charlist()
    |> Enum.uniq()
  end

  def priority(code) do
    if code < 97 do
      code - 64 + 26
    else
      code - 96
    end
  end

  def common(list) do
    list
    |> Enum.map(&prepare/1)
    |> then(fn [l1, l2, l3] -> l1 ++ l2 ++ l3 end)
    |> Enum.sort()
    |> Enum.reduce_while({'', 0}, fn c, acc ->
      {last, n} = acc

      if c == last do
        if n == 1, do: {:halt, c}, else: {:cont, {c, n + 1}}
      else
        {:cont, {c, 0}}
      end
    end)
  end

  def run(input) do
    input
    |> String.split("\n", trim: true)
    |> group()
    |> Enum.map(fn group -> common(group) end)
    |> Enum.map(&priority/1)
    |> Enum.sum()
  end

  def reveal(input) do
    IO.puts("--- Part two ---")
    IO.inspect(input)
  end
end

Two.run(test_input)
assert(Two.run(test_input) == 70, "Part 2 with test input failed")

input = Kino.Input.read(input_field)
result = Two.run(input)
assert(result == 2758, "Part 2 failed")
Two.reveal(result)
```
