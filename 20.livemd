# Day 20: Grove Positioning System

```elixir
Mix.install([
  {:kino, "~> 0.7.0"}
])

import ExUnit.Assertions
```

## Import data

```elixir
# input_field = Kino.Input.textarea("Please paste your input file:")
input = File.read!(__DIR__ <> "/input/20.txt")
```

## Helper

```elixir
defmodule AOC do
  def split_lines(text), do: String.split(text, "\n", trim: true)
  def split_chunks(text), do: String.split(text, "\n\n", trim: true)
end
```

## Part 1

```elixir
test_input = """
1
2
-3
3
-2
0
4
"""
```

<https://adventofcode.com/2022/day/20>

## Parser

```elixir
defmodule Parse do
  def run(input) do
    input
    |> AOC.split_lines()
    |> Enum.map(&String.to_integer(&1))
  end
end
```

> The encrypted file is a list of numbers. To mix the file, move each number forward or backward in the file a number of positions equal to the value of the number being moved. The list is circular, so moving a number off one end of the list wraps back around to the other end as if the ends were connected.

Unclear: How to move multiple occurences of the same number?

```elixir
defmodule One do
  @moduledoc """
  The numbers are not unique. So keep original order.
  """

  def run(input) do
    ops = input |> Parse.run()
    len = length(ops)

    data =
      ops
      |> Enum.with_index()
      |> Enum.map(fn {num, idx} -> {num, idx} end)

    {mixed, _} =
      ops
      |> Enum.reduce(
        {data, 0},
        fn op, {acc, idx} -> {move(op, idx, acc, len), idx + 1} end
      )

    pos_null = Enum.find_index(mixed, fn {num, _} -> num == 0 end)

    Enum.sum([
      num_at(mixed, pos_null + 1000, len),
      num_at(mixed, pos_null + 2000, len),
      num_at(mixed, pos_null + 3000, len)
    ])
  end

  def move(_op, idx, data, len) do
    {left, {x, num}, right} = split(idx, [], data)
    # It took me hours to figure out the correct modulo for the wrap around.
    move_it(left, {x, num}, right, Integer.mod(length(left) + x, len - 1))
  end

  # find old position of number
  def split(idx, left, [hd | right]) do
    {_, pos} = hd
    if idx == pos, do: {Enum.reverse(left), hd, right}, else: split(idx, [hd | left], right)
  end

  def move_it(left, hd, right, new_pos) do
    len_left = length(left)

    cond do
      new_pos < len_left ->
        {ll, lr} = Enum.split(left, new_pos)
        ll ++ [hd | lr] ++ right

      true ->
        {rl, rr} = Enum.split(right, new_pos - len_left)
        left ++ rl ++ [hd | rr]
    end
  end

  def num_at(data, idx, len) do
    {num, _} = Enum.at(data, rem(idx, len))
    num
  end
end

One.run(test_input)
```

```elixir
One.run(input)
```

## Part 2

```elixir
defmodule Two do
  @key 811_589_153

  def mix(data, ops, len) do
    {mixed, _} =
      ops
      |> Enum.reduce({data, 0}, fn op, {acc, idx} -> {One.move(op, idx, acc, len), idx + 1} end)

    mixed
  end

  def run(input) do
    ops =
      input
      |> Parse.run()
      |> Enum.map(&(&1 * @key))

    len = length(ops)

    data =
      ops
      |> Enum.with_index()
      |> Enum.map(fn {num, idx} -> {num, idx} end)

    mixed =
      1..10
      |> Enum.reduce(data, fn _, acc -> mix(acc, ops, len) end)

    pos_null = Enum.find_index(mixed, fn {num, _} -> num == 0 end)

    Enum.sum([
      One.num_at(mixed, pos_null + 1000, len),
      One.num_at(mixed, pos_null + 2000, len),
      One.num_at(mixed, pos_null + 3000, len)
    ])
  end
end

Two.run(test_input)
```

```elixir
result = Two.run(input)
```

## Both parts

```elixir
IO.puts("--- Part one ---")
assert(One.run(test_input) == 3, "Part 1 with test input failed")
result = One.run(input)
assert(result == 7004, "Part 1 failed")
IO.puts(result)

IO.puts("--- Part two ---")
assert(Two.run(test_input) == 1_623_178_306, "Part 2 with test input failed")
result_2 = Two.run(input)
assert(result_2 == 17_200_008_919_529, "Part 2 failed")
IO.puts(result_2)
```
