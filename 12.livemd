# Day 12: Hill Climbing Algorithm

```elixir
Mix.install([
  {:kino, "~> 0.7.0"},
  {:vega_lite, "~> 0.1.6"},
  {:kino_vega_lite, "~> 0.1.7"}
])

alias VegaLite, as: Vl

import ExUnit.Assertions
```

## Import data

```elixir
# input_field = Kino.Input.textarea("Please paste your input file:")
input = File.read!(__DIR__ <> "/input/12.txt")
```

## Helper

```elixir
defmodule AOC do
  def split_lines(text), do: String.split(text, "\n", trim: true)
  def split_chunks(text), do: String.split(text, "\n\n", trim: true)
end
```

## Part 1

```elixir
test_input = """
Sabqponm
abcryxxl
accszExk
acctuvwj
abdefghi
"""
```

<https://adventofcode.com/2022/day/12>

## Parser

```elixir
defmodule Node do
  defstruct id: nil, height: ?a, cost: 9_999_999, from: nil, dest: nil
end

defmodule Parse do
  def run(input) do
    input
    |> AOC.split_lines()
    # Add row index
    |> Enum.with_index()
    |> Enum.map(fn {line, row} ->
      # Add col index
      Enum.with_index(
        String.split(line, "", trim: true),
        # and build {{x,y},el} tuple
        # Fix height for end
        fn el, idx ->
          h = hd(String.to_charlist(el))

          {{idx + 1, row + 1},
           %Node{
             id: {idx + 1, row + 1},
             height: if(h == ?E, do: ?z, else: h),
             dest: h == ?E
           }}
        end
      )
    end)
    |> Enum.flat_map(&Function.identity/1)
    |> Map.new()
  end
end

nodes = Parse.run(test_input)
```

```elixir
defmodule One do
  @doc """
  Find node to start
  """
  def start(nodes) do
    s =
      nodes
      |> Map.filter(fn {_, v} -> v.height == ?S end)
      |> Map.keys()

    hd(s)
  end

  def can_step_to(nodes, {x, y}, height) do
    case Map.fetch(nodes, {x, y}) do
      {:ok, dest} ->
        if dest.height <= height + 1, do: {x, y}, else: false

      _ ->
        false
    end
  end

  def can_reach(nodes, {x, y}, height) do
    # Fix height for start
    height = if height == ?S, do: ?a, else: height

    Enum.filter(
      [
        can_step_to(nodes, {x - 1, y}, height),
        can_step_to(nodes, {x + 1, y}, height),
        can_step_to(nodes, {x, y - 1}, height),
        can_step_to(nodes, {x, y + 1}, height)
      ],
      &Function.identity/1
    )
  end

  def run(input) do
    nodes = Parse.run(input)
    first = start(nodes)

    nodes
    |> Map.update(first, node, fn node -> %{node | cost: 0} end)
    |> dijkstra(first, [])
  end

  def update_cost(nodes, pos, cost, from) do
    nodes
    |> Map.update(pos, nil, fn node ->
      if cost < node.cost, do: %{node | cost: cost}, else: node
    end)
    |> Map.update(pos, nil, fn node -> %{node | from: from} end)
  end

  def sort_by_cost(a, b) do
    a.cost < b.cost
  end

  def dijkstra(nodes, current, visited) do
    {:ok, node} = Map.fetch(nodes, current)

    # Reached destination?
    if node.dest do
      way([node | visited])
    else
      # Remove from nodelist
      nodes = Map.delete(nodes, current)
      # Find nodes to reach
      # update cost and from
      nodes =
        can_reach(nodes, current, node.height)
        |> Enum.reduce(nodes, fn pos, nodes -> update_cost(nodes, pos, node.cost + 1, node.id) end)

      # select node with lowest cost
      %{id: next} =
        nodes
        |> Map.values()
        |> Enum.sort(fn a, b -> sort_by_cost(a, b) end)
        |> hd()

      # continue
      dijkstra(nodes, next, [node | visited])
    end
  end

  def way(nodes) do
    way(nodes, [])
  end

  def way([], path) do
    path
  end

  def way([head | nodes], path) do
    %{id: id, from: from} = head
    way(Enum.drop_while(nodes, fn %{id: id} -> id != from end), [head | path])
  end
end

path = One.run(test_input)
```

## Kino

```elixir
data = input

chart =
  Vl.new(width: 3200, height: 800)
  |> Vl.layers([
    Vl.new()
    |> Vl.data_from_values(
      Map.values(Parse.run(data))
      |> Enum.map(fn %{id: {x, y}, height: h} -> %{"x" => x, "y" => y, "h" => h - ?a} end)
    )
    |> Vl.mark(:rect, opacity: 0.9)
    |> Vl.encode_field(:x, "x", type: :nominal, axis: nil)
    |> Vl.encode_field(:y, "y", type: :nominal, axis: nil)
    |> Vl.encode(:color, field: "h", type: :quantitative),
    Vl.new()
    |> Vl.mark(:text, color: :white, angle: -45)
    |> Vl.encode_field(:x, "x", type: :nominal, axis: nil)
    |> Vl.encode_field(:y, "y", type: :nominal, axis: nil)
    |> Vl.encode(:text, field: "c", type: :quantitative)
  ])
  |> Kino.VegaLite.new()
  |> Kino.render()

for %{id: {x, y}, cost: c} <- One.run(data) do
  Kino.VegaLite.push(chart, %{"x" => x, "y" => y, "h" => -25, "c" => c})
  # Process.sleep(1)
end
```

My solution is of by 2. The test data is correct, the puzzle input produces 464. The correct anwser is 462. Two other solutions provided that value.

Now happy debugging.

Algo ist correct. Nice encoding error. I encoded E as z + 1. But E must be equal z as a height. New field for destination.

On the plus side: I learned some Vega lite.

```elixir
One.run(input)
```

## Part 2

```elixir
defmodule Two do
  def count_steps(nodes, first) do
    nodes
    |> Map.update(first, nil, fn node -> %{node | cost: 0} end)
    |> One.dijkstra(first, [])
    |> length()
    |> then(fn l -> l - 1 end)
  end

  def run(input) do
    nodes = Parse.run(input)
    size_y = length(AOC.split_lines(input))

    1..size_y
    |> Enum.map(fn y -> count_steps(nodes, {1, y}) end)
    |> Enum.min()
  end
end

Two.run(input)
```

```elixir
result = Two.run(input)
```

## Both parts

```elixir
IO.puts("--- Part one ---")
assert(One.run(test_input) == 31, "Part 1 with test input failed")
result = One.run(input)
assert(result == 462, "Part 1 failed")
IO.puts(result)

IO.puts("--- Part two ---")
assert(Two.run(test_input) == 23, "Part 2 with test input failed")
result_2 = Two.run(input)
assert(result_2 == 23, "Part 2 failed")
IO.puts(result_2)
```
