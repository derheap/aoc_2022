# Day 12: Hill Climbing Algorithm

```elixir
Mix.install([
  {:kino, "~> 0.7.0"}
])

import ExUnit.Assertions
```

## Import data

```elixir
# input_field = Kino.Input.textarea("Please paste your input file:")
input = File.read!(__DIR__ <> "/input/12.txt")
```

## Helper

```elixir
defmodule AOC do
  def split_lines(text), do: String.split(text, "\n", trim: true)
  def split_chunks(text), do: String.split(text, "\n\n", trim: true)
end
```

## Part 1

```elixir
test_input = """
Sabqponm
abcryxxl
accszExk
acctuvwj
abdefghi
"""
```

<https://adventofcode.com/2022/day/12>

## Parser

```elixir
defmodule Node do
  defstruct id: nil, height: ?a, cost: 9_999_999, from: nil
end

defmodule Parse do
  def run(input) do
    input
    |> AOC.split_lines()
    # Add row index
    |> Enum.with_index()
    |> Enum.map(fn {line, row} ->
      # Add col index
      Enum.with_index(
        String.split(line, "", trim: true),
        # and build {{x,y},el} tuple
        # Fix height for end
        fn el, idx ->
          {{idx + 1, row + 1},
           %Node{
             id: {idx + 1, row + 1},
             height:
               case hd(String.to_charlist(el)) do
                 ?E -> ?z + 1
                 x -> x
               end
           }}
        end
      )
    end)
    |> Enum.flat_map(&Function.identity/1)
    |> Map.new()
  end
end

nodes = Parse.run(test_input)
```

```elixir
defmodule One do
  @doc """
  Find node to start
  """
  def start(nodes) do
    s =
      nodes
      |> Map.filter(fn {_, v} -> v.height == ?S end)
      |> Map.keys()

    hd(s)
  end

  def can_step_to(nodes, {x, y}, height) do
    case Map.fetch(nodes, {x, y}) do
      {:ok, dest} ->
        if dest.height <= height + 1, do: {x, y}, else: false

      _ ->
        false
    end
  end

  def can_reach(nodes, {x, y}, height) do
    # Fix height for start
    height = if height == ?S, do: ?a, else: height

    Enum.filter(
      [
        can_step_to(nodes, {x - 1, y}, height),
        can_step_to(nodes, {x + 1, y}, height),
        can_step_to(nodes, {x, y - 1}, height),
        can_step_to(nodes, {x, y + 1}, height)
      ],
      &Function.identity/1
    )
  end

  def run(input) do
    nodes = Parse.run(input)
    first = start(nodes)

    nodes
    |> Map.update(first, node, fn node -> %{node | cost: 0} end)
    |> dijkstra(first, [])
  end

  def update_cost(nodes, pos, cost, from) do
    nodes
    |> Map.update(pos, nil, fn node ->
      if cost < node.cost, do: %{node | cost: cost}, else: node
    end)
    |> Map.update(pos, nil, fn node -> %{node | from: from} end)
  end

  def pos_to_string({x, y}) do
    Integer.to_string(x) <> "," <> Integer.to_string(y)
  end

  def pos_to_string(nil) do
    "?,?"
  end

  def print_way(nodes) do
    nodes
    |> Enum.sort(&sort_by_cost/2)
    |> Enum.each(fn n ->
      IO.puts(
        pos_to_string(n.from) <>
          " -> " <>
          pos_to_string(n.id) <>
          " @" <>
          Integer.to_string(n.cost)
      )
    end)
  end

  def sort_by_cost(a, b) do
    a.cost < b.cost
  end

  def sort_nodes_by_cost(nodes, a, b) do
    IO.inspect({a, b, nodes})
    node_a = Map.fetch!(nodes, a)
    node_b = Map.fetch!(nodes, b)
    node_a.cost < node_b.cost
  end

  def dijkstra(nodes, current, visited) do
    # IO.inspect({current, seen}, label: "dijkstra")
    {:ok, node} = Map.fetch(nodes, current)

    # Reached destination?
    if node.height == ?z + 1 do
      IO.inspect(current, label: "DONE")
      IO.inspect(node, label: "DONE")
      print_way([node | visited])
      node.cost
    else
      # Remove from nodelist
      nodes = Map.delete(nodes, current)
      # Find nodes to reach
      # update cost and from
      nodes =
        can_reach(nodes, current, node.height)
        |> Enum.reduce(nodes, fn pos, nodes -> update_cost(nodes, pos, node.cost + 1, node.id) end)

      # select node with lowest cost
      %{id: next} =
        nodes
        |> Map.values()
        |> Enum.sort(fn a, b -> sort_by_cost(a, b) end)
        |> hd()

      IO.inspect(next)
      # continue
      dijkstra(nodes, next, [node | visited])
    end
  end
end

One.run(test_input)
```

My solution is of by 2. The test data is correct, the puzzle input produces 464. The correct anwser is 462. Two other solutions provided that value.

Now happy debugging.

```elixir
One.run(input)
```

## Part 2

```elixir
defmodule Two do
  def run(input) do
  end
end

Two.run(test_input)
```

```elixir
result = Two.run(input)
```

## Both parts

```elixir
IO.puts("--- Part one ---")
assert(One.run(test_input) == 31, "Part 1 with test input failed")
result = One.run(input)
assert(result == 462, "Part 1 failed")
IO.puts(result)

IO.puts("--- Part two ---")
assert(Two.run(test_input) == 23, "Part 2 with test input failed")
result_2 = Two.run(input)
assert(result_2 == 23, "Part 2 failed")
IO.puts(result_2)
```
